// Copyright 2017 Google Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file.

package main

import (
	"errors"
	"fmt"

	"golang.org/x/net/context"

	"gocloud-exp/firestore"
)

func addDocAsMap(ctx context.Context, client *firestore.Client) error {
	// [START fs_add_simple_doc_as_map]
	_, err := client.Collection("cities").Doc("LA").Set(ctx, map[string]interface{}{
		"name":    "Los Angeles",
		"weather": "sunny",
	})
	if err != nil {
		return err
	}
	// [END fs_add_simple_doc_as_map]
	return nil
}

func addDocDataTypes(ctx context.Context, client *firestore.Client) error {
	// [START fs_add_doc_data_types]
	doc := make(map[string]interface{})
	doc["name"] = "New York City"
	doc["capital"] = false
	doc["areaInSquareMiles"] = 468.9
	doc["airports"] = []string{"JFK", "LGA"}
	doc["country"] = "USA"
	doc["weather"] = nil
	doc["coordinates"] = Coordinates{40.73, -73.93}

	_, err := client.Collection("cities").Doc("NYC").Set(ctx, doc)
	if err != nil {
		return err
	}
	// [END fs_add_doc_data_types]
	return nil
}

func addDocAsEntity(ctx context.Context, client *firestore.Client) error {
	// [START fs_add_simple_doc_as_entity]
	city := City{
		Name:    "Los Angeles",
		Weather: "sunny",
	}
	_, err := client.Collection("cities").Doc("LA").Set(ctx, city)
	if err != nil {
		return err
	}
	// [END fs_add_simple_doc_as_entity]
	return nil
}

func addDocAfterAutoGeneratedID(ctx context.Context, client *firestore.Client) error {
	// [START fs_add_doc_data_after_auto_id]
	ref := client.Collection("cities").NewDoc()

	fmt.Printf("New document ID: %v\n", ref.ID)
	city := City{
		Name:    "Sydney",
		Country: "Australia",
	}
	_, err := ref.Set(ctx, city)
	if err != nil {
		return err
	}
	// [END fs_add_doc_data_after_auto_id]
	return nil
}

func updateDoc(ctx context.Context, client *firestore.Client) error {
	// [START fs_update_doc]
	_, err := client.Collection("cities").Doc("LA").Set(ctx, map[string]interface{}{
		"country": "USA",
	})
	if err != nil {
		return err
	}
	// [END fs_update_doc]
	return nil
}

func updateDocMultiple(ctx context.Context, client *firestore.Client) error {
	_, err := client.Collection("cities").Doc("Delhi").Set(ctx, City{Name: "Delhi"})
	if err != nil {
		return err
	}

	// [START fs_update_multiple_fields]
	_, err = client.Collection("cities").Doc("Delhi").Set(ctx, map[string]interface{}{
		"capital":           true,
		"country":           "India",
		"population":        16787941,
		"areaInSquareMiles": 573.0,
	})
	if err != nil {
		return err
	}
	// [END fs_update_multiple_fields]
	return nil
}

func updateDocNested(ctx context.Context, client *firestore.Client) error {
	city := City{Name: "Beijing"}
	_, err := client.Collection("cities").Doc("Beijing").Set(ctx, city)
	if err != nil {
		return err
	}

	// [START fs_update_nested_fields]
	_, err = client.Collection("cities").Doc("Beijing").Set(ctx, map[string]interface{}{
		"capital": true,
		"coordinates": map[string]interface{}{
			"latitude":  39.9042,
			"longitude": 116.4074,
		},
	})
	if err != nil {
		return err
	}
	// [END fs_update_nested_fields]
	return nil
}

func deleteDoc(ctx context.Context, client *firestore.Client) error {
	// [START fs_delete_doc]
	_, err := client.Collection("cities").Doc("LA").Delete(ctx)
	if err != nil {
		return err
	}
	// [END fs_delete_doc]
	return nil
}

func runSimpleTransaction(ctx context.Context, client *firestore.Client) error {
	// [START fs_run_simple_transaction]
	ref := client.Collection("cities").NewDoc()
	_, err := ref.Set(ctx, City{
		Name:       "Sao Paulo",
		Country:    "Brazil",
		Population: 12038175,
	})
	if err != nil {
		return err
	}

	err = client.RunTransaction(ctx, func(tx *firestore.Transaction) error {
		doc, err := tx.Get(ref) // tx.Get, NOT ref.Get!
		if err != nil {
			return err
		}
		pop, err := doc.DataAt("population")
		if err != nil {
			return err
		}
		return tx.UpdateMap(ref, map[string]interface{}{
			"population": pop.(int64) + 1,
		})
	})
	if err != nil {
		return err
	}
	// [END fs_run_simple_transaction]
	return nil
}

func infoTransaction(ctx context.Context, client *firestore.Client) error {
	ref := client.Collection("cities").Doc("Paris")
	_, err := ref.Set(ctx, City{
		Population: 5000,
	})
	if err != nil {
		return err
	}

	// [START fs_return_info_transaction]
	err = client.RunTransaction(ctx, func(tx *firestore.Transaction) error {
		doc, err := tx.Get(ref)
		if err != nil {
			return err
		}
		pop, err := doc.DataAt("population")
		if err != nil {
			return err
		}
		newpop := pop.(int64) + 1
		if newpop <= 5000000 {
			return tx.UpdateMap(ref, map[string]interface{}{
				"population": pop.(int64) + 1,
			})
		}
		return errors.New("population is too big")
	})
	if err != nil {
		return err
	}
	// [END fs_return_info_transaction]
	return nil
}
